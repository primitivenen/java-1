
/**
 * Write a description of Part1 here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */

import edu.duke.*;

public class Part1 {
    public int findStopCodon(String dna, int startIndex, String stopCodon){
        int currindex = dna.indexOf(stopCodon, startIndex+3);
        while(currindex != -1){
            int diff = currindex - startIndex;
            if(diff % 3 == 0)
                return currindex;
            else
                currindex = dna.indexOf(stopCodon, currindex+3);
        }
        return dna.length();
    }
    public void testFindStopCodon(){
        System.out.println(findStopCodon("AATGCTAACTAGCTGACTAAT",1,"TGA"));
        System.out.println(findStopCodon("CTGCCTGCATAATGAATGAAATAA",15,"TAA"));
    }
    public String findGene(String dna){
        int len = dna.length();
        int startIndex = dna.indexOf("ATG");
        int start = startIndex;
    
        while(true){
            if(startIndex == -1||startIndex == len-5) {
                return "";
            }
            int taa = findStopCodon(dna, startIndex, "TAA");
            int tag = findStopCodon(dna, startIndex, "TAG"); 
            int tga = findStopCodon(dna, startIndex, "TGA"); 
            int temp = Math.min(taa, tag);
            int minIndex = Math.min(temp, tga);
            if(minIndex == len) {
                dna = dna.substring(startIndex+3);
                startIndex = dna.indexOf("ATG");
            }
            else{   
                return dna.substring(startIndex, minIndex+3);
            }
        }
        
    }
    public void testFindGene(){
        /*System.out.println("Find one ATG one end Gene: "+findGene("AATGCTAACTAGCTGACTAAT"));
        System.out.println("Find ATG no end Gene: "+findGene("CTGCCTGCATGATCGTA"));
        System.out.println("Find one ATG mul end Gene: "+findGene("ATGAAATAATAGTGA"));
        System.out.println("Find one ATG mul end Gene: "+findGene("ATGTTTTAGTGA"));
        System.out.println("Find No ATG Gene: "+findGene("CTGCCTGCATCGTA"));
        System.out.println("Find No ATG two end Gene: "+findGene("CTGCCTGCATAATGA"));*/
        System.out.println("Find No ATG two end one ATG one end Gene: "+findGene("CTGCCTGCATAATGAATGAAATAA"));
    }
    public void printAllGenes(String dna){
        int count = 0;
        while(true){ 
            String gene = findGene(dna);
            if(gene=="")
                break;
            int index = dna.indexOf(gene);
            System.out.println("Find a gene: "+gene +" with size "+gene.length());
            count++;
            index = index+gene.length();
            dna = dna.substring(index);      
        }  
        System.out.println("There are totally "+count+" genes.");
    }
    public void testPrintAllGenes(){
        FileResource fr = new FileResource();
        printAllGenes(fr.asString().toUpperCase());
        //printAllGenes("ATGAAATAAATGGGGTAGTAATGAATGTTTTGA");
    }
    public StorageResource getAllGenes(String dna){
        StorageResource sr = new StorageResource();
        while(true){ 
            String gene = findGene(dna);
            if(gene == ""){
                break;
            }
            int index = dna.indexOf(gene);
            sr.add(gene);
            index = index+gene.length();
            dna = dna.substring(index);
        }    
        return sr;
    }
    public double cgRatio(String dna){
        int countC = 0;
        int countG = 0;
        int index = 0;
        int start = 0;
        while(true){
            index = dna.indexOf("C", start);
            if(index == -1){
                break;
            }
            countC++;
            start = index+1;
        }
        start = 0;
        while(true){
            index = dna.indexOf("G", start);
            if(index == -1){
                break;
            }
            countG++;
            start = index+1;
        }
        double cgR = ((double)(countC+countG))/dna.length();
        System.out.println("The ratio is "+cgR);
        return cgR;
    }
    public void testCGRatio(){
        FileResource fr = new FileResource();
        System.out.println(cgRatio(fr.asString().toUpperCase()));
    }
    public int countCTG(String dna){
        int start = 0;
        int count = 0;
        int index = 0;
        while(true){
            index = dna.indexOf("CTG", start);
            if(index == -1){
                break;
            }
            count++;
            start = index+1;
        }
        return count;
    }
    public void testcountCTG(){
        FileResource fr = new FileResource();
        System.out.println(countCTG(fr.asString().toUpperCase()));
    }    
    public void processGenes(StorageResource sr){
        int count9 = 0;
        int countcg35 = 0;
        int len = 0;
        String max = "";
        int count60 = 0;
        for(String dna:sr.data()){
            dna = dna.toUpperCase();
            if(dna.length()>9){
                System.out.println("The dna longer than 9 is "+dna);
                count9++;
            }
            if(cgRatio(dna)>0.35){
                System.out.println("The string higher than 0.35 is "+dna);
                countcg35++;
            }
            if(dna.length()>len){
                max = dna;
                len = dna.length();
            }
            if(dna.length()>60){
                System.out.println("The string longer than 60 is "+dna);
                count60++;
            }
        }
        System.out.println("The number of strings in sr that are longer than 9 characters is "+count9);
        System.out.println("The number of strings in sr that are higher than 0.35 is "+countcg35);
        System.out.println("The length of the longest gene in sr is "+len);
        System.out.println("The number of genes longer than 60 is "+count60);
    }
    public void testProcessGenes(){
        FileResource fr = new FileResource();        
        StorageResource sr = getAllGenes(fr.asString().toUpperCase());
        System.out.println("The number of genes is "+sr.size());
        processGenes(sr);
    }
}
